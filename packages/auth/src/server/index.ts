import { type BetterAuthPlugin, betterAuth } from "better-auth"
import { drizzleAdapter } from "better-auth/adapters/drizzle"

import type { db } from "@init/db"
import type { db as dbServerless } from "@init/db/serverless"
import env from "@init/env/auth"
import {
  APP_ID,
  APP_NAME,
  SESSION_EXPIRES_IN,
  SESSION_UPDATE_AGE,
} from "@init/utils/constants"

type CreateAuthOptions = Omit<
  Parameters<typeof betterAuth>[0],
  "appName" | "secret" | "database" | "advanced" | "session" | "plugins"
> & { database: typeof db | typeof dbServerless }

export function createAuth<const Plugins extends BetterAuthPlugin[]>(
  options: CreateAuthOptions,
  plugins: Plugins = [] as unknown as Plugins
) {
  const { database, ...rest } = options

  return betterAuth({
    appName: APP_NAME,
    secret: env.AUTH_SECRET,
    database: drizzleAdapter(database, {
      provider: "pg",
      usePlural: true,
    }),
    advanced: {
      database: {
        // We rely on ids generated by the database
        generateId: false,
      },
      cookiePrefix: APP_ID,
    },
    session: {
      expiresIn: SESSION_EXPIRES_IN,
      updateAge: SESSION_UPDATE_AGE,
    },
    plugins,
    ...rest,
  })
}

export type Auth = ReturnType<typeof createAuth>

export { APIError as AuthError } from "better-auth/api"
