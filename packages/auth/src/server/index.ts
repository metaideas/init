import { type BetterAuthPlugin, betterAuth } from "better-auth"
import { drizzleAdapter } from "better-auth/adapters/drizzle"

import { db } from "@this/db"
import env from "@this/env/auth"
import { APP_ID, APP_NAME } from "@this/utils/constants"

type CreateAuthOptions = Pick<
  Parameters<typeof betterAuth>[0],
  | "basePath"
  | "baseURL"
  | "emailAndPassword"
  | "secondaryStorage"
  | "socialProviders"
  | "trustedOrigins"
>

export function createAuth<const Plugins extends BetterAuthPlugin[]>(
  options: CreateAuthOptions = {},
  plugins: Plugins = [] as unknown as Plugins
) {
  return betterAuth({
    appName: APP_NAME,
    secret: env.AUTH_SECRET,
    database: drizzleAdapter(db, {
      provider: "sqlite",
      usePlural: true,
    }),
    advanced: {
      // We rely on ids generated by the database
      generateId: false,
      cookiePrefix: APP_ID,
    },
    session: {
      expiresIn: 60 * 60 * 24 * 30, // 30 days
      updateAge: 60 * 60 * 24 * 15, // 15 days
    },
    plugins,
    ...options,
  })
}

export { BetterAuthError } from "better-auth"
