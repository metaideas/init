import { type BetterAuthPlugin, betterAuth } from "better-auth"
import { drizzleAdapter } from "better-auth/adapters/drizzle"

import type { Database } from "@init/db/client"
import { APP_ID, APP_NAME } from "@init/utils/constants"

type CreateAuthOptions = Omit<
  Parameters<typeof betterAuth>[0],
  "appName" | "secret" | "database" | "advanced" | "session" | "plugins"
> & { secret: string; database: Database }

export function createAuth<const Plugins extends BetterAuthPlugin[]>(
  { database, ...options }: CreateAuthOptions,
  plugins: Plugins = [] as unknown as Plugins
) {
  return betterAuth({
    appName: APP_NAME,
    database: drizzleAdapter(database, {
      provider: "sqlite",
      usePlural: true,
    }),
    advanced: {
      database: {
        // We rely on ids generated by the database
        generateId: false,
      },
      cookiePrefix: APP_ID,
    },
    session: {
      expiresIn: 60 * 60 * 24 * 30, // 30 days
      updateAge: 60 * 60 * 24 * 15, // 15 days
    },
    plugins,
    ...options,
  })
}

export type Auth = ReturnType<typeof createAuth>

export { APIError as AuthError } from "better-auth/api"
