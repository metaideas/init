/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as ApiTestRouteImport } from './routes/api/test'
import { Route as unauthenticatedLayoutRouteImport } from './routes/(unauthenticated)/_layout'
import { Route as authenticatedLayoutRouteImport } from './routes/(authenticated)/_layout'
import { Route as authenticatedLayoutIndexRouteImport } from './routes/(authenticated)/_layout/index'
import { Route as ApiAuthSplatRouteImport } from './routes/api/auth.$'
import { Route as unauthenticatedLayoutSignUpRouteImport } from './routes/(unauthenticated)/_layout/sign-up'
import { Route as unauthenticatedLayoutSignInRouteImport } from './routes/(unauthenticated)/_layout/sign-in'
import { Route as unauthenticatedLayoutForgotPasswordRouteImport } from './routes/(unauthenticated)/_layout/forgot-password'

const unauthenticatedRouteImport = createFileRoute('/(unauthenticated)')()
const authenticatedRouteImport = createFileRoute('/(authenticated)')()

const unauthenticatedRoute = unauthenticatedRouteImport.update({
  id: '/(unauthenticated)',
  getParentRoute: () => rootRouteImport,
} as any)
const authenticatedRoute = authenticatedRouteImport.update({
  id: '/(authenticated)',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiTestRoute = ApiTestRouteImport.update({
  id: '/api/test',
  path: '/api/test',
  getParentRoute: () => rootRouteImport,
} as any)
const unauthenticatedLayoutRoute = unauthenticatedLayoutRouteImport.update({
  id: '/_layout',
  getParentRoute: () => unauthenticatedRoute,
} as any)
const authenticatedLayoutRoute = authenticatedLayoutRouteImport.update({
  id: '/_layout',
  getParentRoute: () => authenticatedRoute,
} as any)
const authenticatedLayoutIndexRoute =
  authenticatedLayoutIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => authenticatedLayoutRoute,
  } as any)
const ApiAuthSplatRoute = ApiAuthSplatRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootRouteImport,
} as any)
const unauthenticatedLayoutSignUpRoute =
  unauthenticatedLayoutSignUpRouteImport.update({
    id: '/sign-up',
    path: '/sign-up',
    getParentRoute: () => unauthenticatedLayoutRoute,
  } as any)
const unauthenticatedLayoutSignInRoute =
  unauthenticatedLayoutSignInRouteImport.update({
    id: '/sign-in',
    path: '/sign-in',
    getParentRoute: () => unauthenticatedLayoutRoute,
  } as any)
const unauthenticatedLayoutForgotPasswordRoute =
  unauthenticatedLayoutForgotPasswordRouteImport.update({
    id: '/forgot-password',
    path: '/forgot-password',
    getParentRoute: () => unauthenticatedLayoutRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof authenticatedLayoutIndexRoute
  '/api/test': typeof ApiTestRoute
  '/forgot-password': typeof unauthenticatedLayoutForgotPasswordRoute
  '/sign-in': typeof unauthenticatedLayoutSignInRoute
  '/sign-up': typeof unauthenticatedLayoutSignUpRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
}
export interface FileRoutesByTo {
  '/': typeof authenticatedLayoutIndexRoute
  '/api/test': typeof ApiTestRoute
  '/forgot-password': typeof unauthenticatedLayoutForgotPasswordRoute
  '/sign-in': typeof unauthenticatedLayoutSignInRoute
  '/sign-up': typeof unauthenticatedLayoutSignUpRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/(authenticated)': typeof authenticatedRouteWithChildren
  '/(authenticated)/_layout': typeof authenticatedLayoutRouteWithChildren
  '/(unauthenticated)': typeof unauthenticatedRouteWithChildren
  '/(unauthenticated)/_layout': typeof unauthenticatedLayoutRouteWithChildren
  '/api/test': typeof ApiTestRoute
  '/(unauthenticated)/_layout/forgot-password': typeof unauthenticatedLayoutForgotPasswordRoute
  '/(unauthenticated)/_layout/sign-in': typeof unauthenticatedLayoutSignInRoute
  '/(unauthenticated)/_layout/sign-up': typeof unauthenticatedLayoutSignUpRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/(authenticated)/_layout/': typeof authenticatedLayoutIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/api/test'
    | '/forgot-password'
    | '/sign-in'
    | '/sign-up'
    | '/api/auth/$'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/api/test'
    | '/forgot-password'
    | '/sign-in'
    | '/sign-up'
    | '/api/auth/$'
  id:
    | '__root__'
    | '/(authenticated)'
    | '/(authenticated)/_layout'
    | '/(unauthenticated)'
    | '/(unauthenticated)/_layout'
    | '/api/test'
    | '/(unauthenticated)/_layout/forgot-password'
    | '/(unauthenticated)/_layout/sign-in'
    | '/(unauthenticated)/_layout/sign-up'
    | '/api/auth/$'
    | '/(authenticated)/_layout/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  authenticatedRoute: typeof authenticatedRouteWithChildren
  unauthenticatedRoute: typeof unauthenticatedRouteWithChildren
  ApiTestRoute: typeof ApiTestRoute
  ApiAuthSplatRoute: typeof ApiAuthSplatRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(unauthenticated)': {
      id: '/(unauthenticated)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof unauthenticatedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(authenticated)': {
      id: '/(authenticated)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authenticatedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/test': {
      id: '/api/test'
      path: '/api/test'
      fullPath: '/api/test'
      preLoaderRoute: typeof ApiTestRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(unauthenticated)/_layout': {
      id: '/(unauthenticated)/_layout'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof unauthenticatedLayoutRouteImport
      parentRoute: typeof unauthenticatedRoute
    }
    '/(authenticated)/_layout': {
      id: '/(authenticated)/_layout'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authenticatedLayoutRouteImport
      parentRoute: typeof authenticatedRoute
    }
    '/(authenticated)/_layout/': {
      id: '/(authenticated)/_layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authenticatedLayoutIndexRouteImport
      parentRoute: typeof authenticatedLayoutRoute
    }
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(unauthenticated)/_layout/sign-up': {
      id: '/(unauthenticated)/_layout/sign-up'
      path: '/sign-up'
      fullPath: '/sign-up'
      preLoaderRoute: typeof unauthenticatedLayoutSignUpRouteImport
      parentRoute: typeof unauthenticatedLayoutRoute
    }
    '/(unauthenticated)/_layout/sign-in': {
      id: '/(unauthenticated)/_layout/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof unauthenticatedLayoutSignInRouteImport
      parentRoute: typeof unauthenticatedLayoutRoute
    }
    '/(unauthenticated)/_layout/forgot-password': {
      id: '/(unauthenticated)/_layout/forgot-password'
      path: '/forgot-password'
      fullPath: '/forgot-password'
      preLoaderRoute: typeof unauthenticatedLayoutForgotPasswordRouteImport
      parentRoute: typeof unauthenticatedLayoutRoute
    }
  }
}

interface authenticatedLayoutRouteChildren {
  authenticatedLayoutIndexRoute: typeof authenticatedLayoutIndexRoute
}

const authenticatedLayoutRouteChildren: authenticatedLayoutRouteChildren = {
  authenticatedLayoutIndexRoute: authenticatedLayoutIndexRoute,
}

const authenticatedLayoutRouteWithChildren =
  authenticatedLayoutRoute._addFileChildren(authenticatedLayoutRouteChildren)

interface authenticatedRouteChildren {
  authenticatedLayoutRoute: typeof authenticatedLayoutRouteWithChildren
}

const authenticatedRouteChildren: authenticatedRouteChildren = {
  authenticatedLayoutRoute: authenticatedLayoutRouteWithChildren,
}

const authenticatedRouteWithChildren = authenticatedRoute._addFileChildren(
  authenticatedRouteChildren,
)

interface unauthenticatedLayoutRouteChildren {
  unauthenticatedLayoutForgotPasswordRoute: typeof unauthenticatedLayoutForgotPasswordRoute
  unauthenticatedLayoutSignInRoute: typeof unauthenticatedLayoutSignInRoute
  unauthenticatedLayoutSignUpRoute: typeof unauthenticatedLayoutSignUpRoute
}

const unauthenticatedLayoutRouteChildren: unauthenticatedLayoutRouteChildren = {
  unauthenticatedLayoutForgotPasswordRoute:
    unauthenticatedLayoutForgotPasswordRoute,
  unauthenticatedLayoutSignInRoute: unauthenticatedLayoutSignInRoute,
  unauthenticatedLayoutSignUpRoute: unauthenticatedLayoutSignUpRoute,
}

const unauthenticatedLayoutRouteWithChildren =
  unauthenticatedLayoutRoute._addFileChildren(
    unauthenticatedLayoutRouteChildren,
  )

interface unauthenticatedRouteChildren {
  unauthenticatedLayoutRoute: typeof unauthenticatedLayoutRouteWithChildren
}

const unauthenticatedRouteChildren: unauthenticatedRouteChildren = {
  unauthenticatedLayoutRoute: unauthenticatedLayoutRouteWithChildren,
}

const unauthenticatedRouteWithChildren = unauthenticatedRoute._addFileChildren(
  unauthenticatedRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  authenticatedRoute: authenticatedRouteWithChildren,
  unauthenticatedRoute: unauthenticatedRouteWithChildren,
  ApiTestRoute: ApiTestRoute,
  ApiAuthSplatRoute: ApiAuthSplatRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { startInstance } from './start.ts'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
    config: Awaited<ReturnType<typeof startInstance.getOptions>>
  }
}
