/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as UnauthenticatedRouteRouteImport } from './routes/_unauthenticated/route'
import { Route as AuthenticatedRouteRouteImport } from './routes/_authenticated/route'
import { Route as AuthenticatedIndexRouteImport } from './routes/_authenticated/index'
import { Route as ApiTestRouteImport } from './routes/api/test'
import { Route as UnauthenticatedSignUpRouteImport } from './routes/_unauthenticated/sign-up'
import { Route as UnauthenticatedSignInRouteImport } from './routes/_unauthenticated/sign-in'
import { Route as UnauthenticatedForgotPasswordRouteImport } from './routes/_unauthenticated/forgot-password'
import { Route as ApiAuthSplatRouteImport } from './routes/api/auth.$'

const UnauthenticatedRouteRoute = UnauthenticatedRouteRouteImport.update({
  id: '/_unauthenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedRouteRoute = AuthenticatedRouteRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedIndexRoute = AuthenticatedIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthenticatedRouteRoute,
} as any)
const ApiTestRoute = ApiTestRouteImport.update({
  id: '/api/test',
  path: '/api/test',
  getParentRoute: () => rootRouteImport,
} as any)
const UnauthenticatedSignUpRoute = UnauthenticatedSignUpRouteImport.update({
  id: '/sign-up',
  path: '/sign-up',
  getParentRoute: () => UnauthenticatedRouteRoute,
} as any)
const UnauthenticatedSignInRoute = UnauthenticatedSignInRouteImport.update({
  id: '/sign-in',
  path: '/sign-in',
  getParentRoute: () => UnauthenticatedRouteRoute,
} as any)
const UnauthenticatedForgotPasswordRoute =
  UnauthenticatedForgotPasswordRouteImport.update({
    id: '/forgot-password',
    path: '/forgot-password',
    getParentRoute: () => UnauthenticatedRouteRoute,
  } as any)
const ApiAuthSplatRoute = ApiAuthSplatRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/forgot-password': typeof UnauthenticatedForgotPasswordRoute
  '/sign-in': typeof UnauthenticatedSignInRoute
  '/sign-up': typeof UnauthenticatedSignUpRoute
  '/api/test': typeof ApiTestRoute
  '/': typeof AuthenticatedIndexRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
}
export interface FileRoutesByTo {
  '/forgot-password': typeof UnauthenticatedForgotPasswordRoute
  '/sign-in': typeof UnauthenticatedSignInRoute
  '/sign-up': typeof UnauthenticatedSignUpRoute
  '/api/test': typeof ApiTestRoute
  '/': typeof AuthenticatedIndexRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_authenticated': typeof AuthenticatedRouteRouteWithChildren
  '/_unauthenticated': typeof UnauthenticatedRouteRouteWithChildren
  '/_unauthenticated/forgot-password': typeof UnauthenticatedForgotPasswordRoute
  '/_unauthenticated/sign-in': typeof UnauthenticatedSignInRoute
  '/_unauthenticated/sign-up': typeof UnauthenticatedSignUpRoute
  '/api/test': typeof ApiTestRoute
  '/_authenticated/': typeof AuthenticatedIndexRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/forgot-password'
    | '/sign-in'
    | '/sign-up'
    | '/api/test'
    | '/'
    | '/api/auth/$'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/forgot-password'
    | '/sign-in'
    | '/sign-up'
    | '/api/test'
    | '/'
    | '/api/auth/$'
  id:
    | '__root__'
    | '/_authenticated'
    | '/_unauthenticated'
    | '/_unauthenticated/forgot-password'
    | '/_unauthenticated/sign-in'
    | '/_unauthenticated/sign-up'
    | '/api/test'
    | '/_authenticated/'
    | '/api/auth/$'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AuthenticatedRouteRoute: typeof AuthenticatedRouteRouteWithChildren
  UnauthenticatedRouteRoute: typeof UnauthenticatedRouteRouteWithChildren
  ApiTestRoute: typeof ApiTestRoute
  ApiAuthSplatRoute: typeof ApiAuthSplatRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_unauthenticated': {
      id: '/_unauthenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof UnauthenticatedRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/': {
      id: '/_authenticated/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthenticatedIndexRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/api/test': {
      id: '/api/test'
      path: '/api/test'
      fullPath: '/api/test'
      preLoaderRoute: typeof ApiTestRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_unauthenticated/sign-up': {
      id: '/_unauthenticated/sign-up'
      path: '/sign-up'
      fullPath: '/sign-up'
      preLoaderRoute: typeof UnauthenticatedSignUpRouteImport
      parentRoute: typeof UnauthenticatedRouteRoute
    }
    '/_unauthenticated/sign-in': {
      id: '/_unauthenticated/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof UnauthenticatedSignInRouteImport
      parentRoute: typeof UnauthenticatedRouteRoute
    }
    '/_unauthenticated/forgot-password': {
      id: '/_unauthenticated/forgot-password'
      path: '/forgot-password'
      fullPath: '/forgot-password'
      preLoaderRoute: typeof UnauthenticatedForgotPasswordRouteImport
      parentRoute: typeof UnauthenticatedRouteRoute
    }
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

interface AuthenticatedRouteRouteChildren {
  AuthenticatedIndexRoute: typeof AuthenticatedIndexRoute
}

const AuthenticatedRouteRouteChildren: AuthenticatedRouteRouteChildren = {
  AuthenticatedIndexRoute: AuthenticatedIndexRoute,
}

const AuthenticatedRouteRouteWithChildren =
  AuthenticatedRouteRoute._addFileChildren(AuthenticatedRouteRouteChildren)

interface UnauthenticatedRouteRouteChildren {
  UnauthenticatedForgotPasswordRoute: typeof UnauthenticatedForgotPasswordRoute
  UnauthenticatedSignInRoute: typeof UnauthenticatedSignInRoute
  UnauthenticatedSignUpRoute: typeof UnauthenticatedSignUpRoute
}

const UnauthenticatedRouteRouteChildren: UnauthenticatedRouteRouteChildren = {
  UnauthenticatedForgotPasswordRoute: UnauthenticatedForgotPasswordRoute,
  UnauthenticatedSignInRoute: UnauthenticatedSignInRoute,
  UnauthenticatedSignUpRoute: UnauthenticatedSignUpRoute,
}

const UnauthenticatedRouteRouteWithChildren =
  UnauthenticatedRouteRoute._addFileChildren(UnauthenticatedRouteRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  AuthenticatedRouteRoute: AuthenticatedRouteRouteWithChildren,
  UnauthenticatedRouteRoute: UnauthenticatedRouteRouteWithChildren,
  ApiTestRoute: ApiTestRoute,
  ApiAuthSplatRoute: ApiAuthSplatRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { startInstance } from './start.ts'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
    config: Awaited<ReturnType<typeof startInstance.getOptions>>
  }
}
