/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ApiTestRouteImport } from './routes/api/test'
import { Route as unauthenticatedLayoutRouteImport } from './routes/(unauthenticated)/_layout'
import { Route as authenticatedLayoutRouteImport } from './routes/(authenticated)/_layout'
import { Route as authenticatedLayoutIndexRouteImport } from './routes/(authenticated)/_layout/index'
import { Route as ApiAuthSplatRouteImport } from './routes/api/auth.$'
import { Route as unauthenticatedLayoutSignUpRouteImport } from './routes/(unauthenticated)/_layout/sign-up'
import { Route as unauthenticatedLayoutSignInRouteImport } from './routes/(unauthenticated)/_layout/sign-in'

const ApiTestRoute = ApiTestRouteImport.update({
  id: '/api/test',
  path: '/api/test',
  getParentRoute: () => rootRouteImport,
} as any)
const unauthenticatedLayoutRoute = unauthenticatedLayoutRouteImport.update({
  id: '/_layout',
  getParentRoute: () => unauthenticatedRoute,
} as any)
const authenticatedLayoutRoute = authenticatedLayoutRouteImport.update({
  id: '/_layout',
  getParentRoute: () => authenticatedRoute,
} as any)
const authenticatedLayoutIndexRoute =
  authenticatedLayoutIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => authenticatedLayoutRoute,
  } as any)
const ApiAuthSplatRoute = ApiAuthSplatRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootRouteImport,
} as any)
const unauthenticatedLayoutSignUpRoute =
  unauthenticatedLayoutSignUpRouteImport.update({
    id: '/sign-up',
    path: '/sign-up',
    getParentRoute: () => unauthenticatedLayoutRoute,
  } as any)
const unauthenticatedLayoutSignInRoute =
  unauthenticatedLayoutSignInRouteImport.update({
    id: '/sign-in',
    path: '/sign-in',
    getParentRoute: () => unauthenticatedLayoutRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/api/test': typeof ApiTestRoute
  '/sign-in': typeof unauthenticatedLayoutSignInRoute
  '/sign-up': typeof unauthenticatedLayoutSignUpRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/': typeof authenticatedLayoutIndexRoute
}
export interface FileRoutesByTo {
  '/api/test': typeof ApiTestRoute
  '/sign-in': typeof unauthenticatedLayoutSignInRoute
  '/sign-up': typeof unauthenticatedLayoutSignUpRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/': typeof authenticatedLayoutIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/(authenticated)/_layout': typeof authenticatedLayoutRouteWithChildren
  '/(unauthenticated)/_layout': typeof unauthenticatedLayoutRouteWithChildren
  '/api/test': typeof ApiTestRoute
  '/(unauthenticated)/_layout/sign-in': typeof unauthenticatedLayoutSignInRoute
  '/(unauthenticated)/_layout/sign-up': typeof unauthenticatedLayoutSignUpRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/(authenticated)/_layout/': typeof authenticatedLayoutIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/api/test' | '/sign-in' | '/sign-up' | '/api/auth/$' | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '/api/test' | '/sign-in' | '/sign-up' | '/api/auth/$' | '/'
  id:
    | '__root__'
    | '/(authenticated)/_layout'
    | '/(unauthenticated)/_layout'
    | '/api/test'
    | '/(unauthenticated)/_layout/sign-in'
    | '/(unauthenticated)/_layout/sign-up'
    | '/api/auth/$'
    | '/(authenticated)/_layout/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  ApiTestRoute: typeof ApiTestRoute
  ApiAuthSplatRoute: typeof ApiAuthSplatRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/api/test': {
      id: '/api/test'
      path: '/api/test'
      fullPath: '/api/test'
      preLoaderRoute: typeof ApiTestRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(unauthenticated)/_layout': {
      id: '/(unauthenticated)/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof unauthenticatedLayoutRouteImport
      parentRoute: typeof unauthenticatedRoute
    }
    '/(authenticated)/_layout': {
      id: '/(authenticated)/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof authenticatedLayoutRouteImport
      parentRoute: typeof authenticatedRoute
    }
    '/(authenticated)/_layout/': {
      id: '/(authenticated)/_layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authenticatedLayoutIndexRouteImport
      parentRoute: typeof authenticatedLayoutRoute
    }
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(unauthenticated)/_layout/sign-up': {
      id: '/(unauthenticated)/_layout/sign-up'
      path: '/sign-up'
      fullPath: '/sign-up'
      preLoaderRoute: typeof unauthenticatedLayoutSignUpRouteImport
      parentRoute: typeof unauthenticatedLayoutRoute
    }
    '/(unauthenticated)/_layout/sign-in': {
      id: '/(unauthenticated)/_layout/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof unauthenticatedLayoutSignInRouteImport
      parentRoute: typeof unauthenticatedLayoutRoute
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  ApiTestRoute: ApiTestRoute,
  ApiAuthSplatRoute: ApiAuthSplatRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { startInstance } from './start.ts'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
    config: Awaited<ReturnType<typeof startInstance.getOptions>>
  }
}
