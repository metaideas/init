/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './../../routes/__root'
import { Route as PopupLayoutImport } from './../../routes/popup/_layout'
import { Route as PopupLayoutIndexImport } from './../../routes/popup/_layout.index'

// Create Virtual Routes

const PopupImport = createFileRoute('/popup')()

// Create/Update Routes

const PopupRoute = PopupImport.update({
  id: '/popup',
  path: '/popup',
  getParentRoute: () => rootRoute,
} as any)

const PopupLayoutRoute = PopupLayoutImport.update({
  id: '/_layout',
  getParentRoute: () => PopupRoute,
} as any)

const PopupLayoutIndexRoute = PopupLayoutIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PopupLayoutRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/popup': {
      id: '/popup'
      path: '/popup'
      fullPath: '/popup'
      preLoaderRoute: typeof PopupImport
      parentRoute: typeof rootRoute
    }
    '/popup/_layout': {
      id: '/popup/_layout'
      path: '/popup'
      fullPath: '/popup'
      preLoaderRoute: typeof PopupLayoutImport
      parentRoute: typeof PopupRoute
    }
    '/popup/_layout/': {
      id: '/popup/_layout/'
      path: '/'
      fullPath: '/popup/'
      preLoaderRoute: typeof PopupLayoutIndexImport
      parentRoute: typeof PopupLayoutImport
    }
  }
}

// Create and export the route tree

interface PopupLayoutRouteChildren {
  PopupLayoutIndexRoute: typeof PopupLayoutIndexRoute
}

const PopupLayoutRouteChildren: PopupLayoutRouteChildren = {
  PopupLayoutIndexRoute: PopupLayoutIndexRoute,
}

const PopupLayoutRouteWithChildren = PopupLayoutRoute._addFileChildren(
  PopupLayoutRouteChildren,
)

interface PopupRouteChildren {
  PopupLayoutRoute: typeof PopupLayoutRouteWithChildren
}

const PopupRouteChildren: PopupRouteChildren = {
  PopupLayoutRoute: PopupLayoutRouteWithChildren,
}

const PopupRouteWithChildren = PopupRoute._addFileChildren(PopupRouteChildren)

export interface FileRoutesByFullPath {
  '/popup': typeof PopupLayoutRouteWithChildren
  '/popup/': typeof PopupLayoutIndexRoute
}

export interface FileRoutesByTo {
  '/popup': typeof PopupLayoutIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/popup': typeof PopupRouteWithChildren
  '/popup/_layout': typeof PopupLayoutRouteWithChildren
  '/popup/_layout/': typeof PopupLayoutIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/popup' | '/popup/'
  fileRoutesByTo: FileRoutesByTo
  to: '/popup'
  id: '__root__' | '/popup' | '/popup/_layout' | '/popup/_layout/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  PopupRoute: typeof PopupRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  PopupRoute: PopupRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/popup"
      ]
    },
    "/popup": {
      "filePath": "popup",
      "children": [
        "/popup/_layout"
      ]
    },
    "/popup/_layout": {
      "filePath": "popup/_layout.tsx",
      "parent": "/popup",
      "children": [
        "/popup/_layout/"
      ]
    },
    "/popup/_layout/": {
      "filePath": "popup/_layout.index.tsx",
      "parent": "/popup/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
